/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestDbRouteImport } from './routes/test-db'
import { Route as MessagesRouteImport } from './routes/messages'
import { Route as ClientsRouteImport } from './routes/clients'
import { Route as CampaignsRouteImport } from './routes/campaigns'
import { Route as IndexRouteImport } from './routes/index'

const TestDbRoute = TestDbRouteImport.update({
  id: '/test-db',
  path: '/test-db',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagesRoute = MessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)
const CampaignsRoute = CampaignsRouteImport.update({
  id: '/campaigns',
  path: '/campaigns',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/campaigns': typeof CampaignsRoute
  '/clients': typeof ClientsRoute
  '/messages': typeof MessagesRoute
  '/test-db': typeof TestDbRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/campaigns': typeof CampaignsRoute
  '/clients': typeof ClientsRoute
  '/messages': typeof MessagesRoute
  '/test-db': typeof TestDbRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/campaigns': typeof CampaignsRoute
  '/clients': typeof ClientsRoute
  '/messages': typeof MessagesRoute
  '/test-db': typeof TestDbRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/campaigns' | '/clients' | '/messages' | '/test-db'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/campaigns' | '/clients' | '/messages' | '/test-db'
  id: '__root__' | '/' | '/campaigns' | '/clients' | '/messages' | '/test-db'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CampaignsRoute: typeof CampaignsRoute
  ClientsRoute: typeof ClientsRoute
  MessagesRoute: typeof MessagesRoute
  TestDbRoute: typeof TestDbRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test-db': {
      id: '/test-db'
      path: '/test-db'
      fullPath: '/test-db'
      preLoaderRoute: typeof TestDbRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/campaigns': {
      id: '/campaigns'
      path: '/campaigns'
      fullPath: '/campaigns'
      preLoaderRoute: typeof CampaignsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CampaignsRoute: CampaignsRoute,
  ClientsRoute: ClientsRoute,
  MessagesRoute: MessagesRoute,
  TestDbRoute: TestDbRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
